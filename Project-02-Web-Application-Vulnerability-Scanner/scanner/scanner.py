import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlencode
from scanner.crawler import discover_forms
from scanner.payloads import get_payloads
import re

class WebVulnScanner:
    def __init__(self, base_url):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.cookies.set("PHPSESSID", "rodom291ua0fbe0li3n78mcf7h") # Replace with your PHPSESSID session ID
        self.payloads = get_payloads()
        self.forms = discover_forms(self.base_url, session=self.session)

    def scan_form(self, form, attack_type):
        results = []
        action = urljoin(self.base_url, form["action"]) if form["action"] else self.base_url
        method = form["method"].lower()
        payloads = self.payloads[attack_type]
        error_signatures = [
            "sql syntax", "mysql", "syntax error", "unclosed quotation",
            "you have an error in your sql", "Warning: sqlite", "ORA-"
        ]
        for inp in form["inputs"]:
            if not inp["name"]:
                continue
            if inp.get("type") == "hidden":
                continue
            for payload in payloads:
                data = {}
                for inner_inp in form["inputs"]:
                    if not inner_inp["name"]:
                        continue
                    if inner_inp["name"] == inp["name"]:
                        data[inner_inp["name"]] = payload
                    else:
                        data[inner_inp["name"]] = inner_inp.get("value", "")
                try:
                    if method == "post":
                        resp = self.session.post(action, data=data, timeout=10)
                    else:
                        resp = self.session.get(action, params=data, timeout=10)
                    # Reflected/Stored XSS
                    if attack_type == "xss" and self.is_xss_reflected(payload, resp.text):
                        results.append({
                            "payload": payload,
                            "vuln": "XSS",
                            "form": action,
                            "method": method.upper(),
                            "evidence": "Payload reflected in response"
                        })
                    # DOM XSS - also try via GET param injection into the URL
                    if attack_type == "xss":
                        # For DOM XSS, try injecting payload into GET params if possible
                        dom_xss_detected = self.is_dom_xss_possible(payload, resp.text)
                        # If the form method is GET, try the action URL with the payload in each param
                        if not dom_xss_detected and method == "get":
                            # Add payload in each GET param of the action
                            url_parts = action.split('?')
                            base = url_parts[0]
                            params = {}
                            if len(url_parts) > 1:
                                for pair in url_parts[1].split('&'):
                                    if '=' in pair:
                                        k, v = pair.split('=', 1)
                                        params[k] = payload
                            dom_url = base + '?' + urlencode(params) if params else action
                            dom_resp = self.session.get(dom_url, timeout=10)
                            dom_xss_detected = self.is_dom_xss_possible(payload, dom_resp.text)
                        if dom_xss_detected:
                            results.append({
                                "payload": payload,
                                "vuln": "DOM XSS",
                                "form": action,
                                "method": method.upper(),
                                "evidence": "Payload found in script or JS context"
                            })
                    # SQLi
                    if attack_type == "sqli" and any(sig in resp.text.lower() for sig in error_signatures):
                        results.append({
                            "payload": payload,
                            "vuln": "SQLi",
                            "form": action,
                            "method": method.upper(),
                            "evidence": "SQL error message detected"
                        })
                except Exception:
                    continue
        return results

    def is_xss_reflected(self, payload, response_text):
        # Checks if payload is exactly reflected in the HTML (simple reflected/stored XSS)
        return payload in response_text

    def is_dom_xss_possible(self, payload, response_text):
        # Looks for the payload appearing inside <script> tags, attributes, or inline JS
        soup = BeautifulSoup(response_text, "html.parser")
        # Check all <script> tags
        for script in soup.find_all("script"):
            if payload in script.text:
                return True
        # Check inline event handlers (onerror, onclick, etc.)
        # and all attributes for the payload
        attrs = re.findall(r'on\w+="[^"]*"', response_text, re.IGNORECASE)
        for attr in attrs:
            if payload in attr:
                return True
        if payload in response_text:
            return True
        return False

    def scan_csrf(self, form):
        """
        Detects absence of CSRF token in forms using heuristics.
        Looks for hidden inputs with 'csrf' or 'token' in the name or value.
        If none found, flags the form as CSRF-vulnerable.
        """
        results = []
        csrf_token_found = False
        for inp in form["inputs"]:
            if inp.get("type", "").lower() == "hidden":
                name = inp.get("name", "").lower()
                value = (inp.get("value") or "").lower()
                if "csrf" in name or "csrf" in value or "token" in name or "token" in value:
                    csrf_token_found = True
                    break
        if not csrf_token_found:
            results.append({
                "payload": "",
                "vuln": "CSRF",
                "form": urljoin(self.base_url, form["action"]) if form["action"] else self.base_url,
                "method": form["method"].upper(),
                "evidence": "No CSRF token found in form"
            })
        return results

    def run_scan(self):
        all_results = []
        for form in self.forms:
            all_results.extend(self.scan_form(form, "xss"))
            all_results.extend(self.scan_form(form, "sqli"))
            all_results.extend(self.scan_csrf(form))
        uniq = {(r["payload"], r["vuln"], r["form"]): r for r in all_results}
        return list(uniq.values())